<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

<!-- 配合${}使用 -->
    <context:property-placeholder location="classpath:redis.properties" />
<!-- 配合#{}使用
	<util:properties id="redis" location="classpath:redis.properties" />
	<cache:annotation-driven cache-manager="cacheManager" />
-->

    <!-- pool配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	   <property name="maxIdle" value="${redis.maxIdle}" />
       <property name="maxTotal" value="${redis.maxActive}" />
       <property name="maxWaitMillis" value="${redis.maxWait}" />
       <property name="testOnBorrow" value="${redis.testOnBorrow}" />
       <!-- 这里的坑：name必须和变量名一致
        <property name="maxIdle" value="#{redis.maxIdle}" />
        <property name="maxTotal" value="#{redis.maxActive}" />
        <property name="maxWaitMillis" value="#{redis.maxWait}" />
        <property name="testOnBorrow" value="#{redis.testOnBorrow}" />
       -->
	</bean>
	
	<!-- 获取jedis -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
	    <constructor-arg index="0" ref="jedisPoolConfig"></constructor-arg>
	    <constructor-arg index="1" value="${redis.host}"></constructor-arg>
	    <constructor-arg index="2" value="${redis.port}" type="int"></constructor-arg>
	    <constructor-arg index="3" value="${redis.timeout}" type="int"></constructor-arg>
	    <!-- 
	    <constructor-arg index="4" value="${redis.password}"></constructor-arg>
	     -->
	</bean>

    <!-- 获取spring的redis -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.password}" />
		<!-- 这里把config塞给工厂 -->
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
	    <!-- 这里通过工厂来构建redis实例，还可以配置序列化器 -->
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer" ref="stringRedisSerializer" />
		<property name="hashKeySerializer" ref="stringRedisSerializer" />
		<property name="valueSerializer" ref="jdkRedisSerializer" />
		<property name="hashValueSerializer" ref="jdkRedisSerializer" />
	</bean>

	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<bean id="jdkRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />

</beans>